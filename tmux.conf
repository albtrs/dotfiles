# -----------------------------------------------------------------
# Prefix
# -----------------------------------------------------------------

set -g prefix C-s    # prefixキーをC-aに変更する
unbind C-b           # C-bのキーバインドを解除する
set repeat-time 1000 # 入力待ち時間

# -----------------------------------------------------------------
# key-bind
# -----------------------------------------------------------------

bind e choose-tree                                             # ツリー表示
bind i display-panes                                           # ペイン番号表示
bind r source-file ~/.tmux.conf \; display-message "Reloaded!" # 設定ファイルリロード
bind \\ split-window -h -c '#{pane_current_path}'              # ペイン分割（カレントディレクトリ）
bind - split-window -v -c '#{pane_current_path}'
bind h select-pane -L                                          # ペインの移動(navigatorで同じ設定があるので重複だが一応)
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h resize-pane -L 5                                   # ペインのリサイズ
bind -r C-j resize-pane -D 5
bind -r C-k resize-pane -U 5
bind -r C-l resize-pane -R 5
bind -r C-\[ swap-pane -U                                      # ペイン入れ替え
bind -r C-\] swap-pane -D
bind s command-prompt "swap-pane -t %%"                        # ペイン入れ替え(番号指定)
bind q   confirm-before "kill-pane"                            # ペイン終了
bind C-c new-window -c '#{pane_current_path}'                  # ウインドウ作成(カレントパスで)
bind C-q confirm-before "kill-window"                          # ウインドウ終了

# 同時入力
set-window-option synchronize-panes off
bind-key * if-shell "tmux show-options -w synchronize-panes | grep off" "set-window-option synchronize-panes on" "set-window-option synchronize-panes off"

# マウス関連（デフォルトはOFFにしておいて、prefix+mでマウスモードを切替える）
set-option -g mouse off
bind-key C-m if-shell "tmux show-options -g mouse | grep off" "set-option -g mouse on" "set-option -g mouse off"

# Capture pane and open in Vim
bind-key C run 'FILE=~/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; tmux capture-pane -J -S -102400 -p > $FILE; tmux new-window "reattach-to-user-namespace $EDITOR $FILE"'

# -----------------------------------------------------------------
# Window
# -----------------------------------------------------------------

# 256色端末を使用する
set -g default-terminal "tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"

# ステータスバー
set-option -g status-justify left
set-option -g status-left '#[bg=colour72] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour185] #H #[bg=colour236] \
#(tmux show-option -g mouse | sed "s/mode-//;s/ /:/") \
#(tmux show-options -w synchronize-panes | sed "s/-panes//;s/ /:/") '
set-option -g status-left-length 100
set-option -g status-bg colour237
set-option -g status-right '#[bg=colour236] #[bg=colour235]#[fg=colour185] #(date "+%a %b %d %H:%M") #[bg=colour236] #[bg=colour237] #[bg=colour72] '
set-option -g status-interval 1

# ボーダーライン
set-option -g pane-border-status bottom
set-option -g pane-border-format "#{pane_index} #{pane_current_command}"
set-option -g pane-active-border-style fg=colour250
set-option -g pane-border-style fg=colour240

# ウインドウ
set-window-option -g window-status-format '#[bg=colour238]#[fg=colour107] #I #[bg=colour239]#[fg=colour110] #[bg=colour240]#W#[bg=colour239]#[fg=colour195]#F#[bg=colour238] '
set-window-option -g window-status-current-format '#[bg=colour236]#[fg=colour215] #I #[bg=colour235]#[fg=colour167] #[bg=colour234]#W#[bg=colour235]#[fg=colour195]#F#[bg=colour236] '

# 表示時間
set display-panes-time 9999

# 更新感覚
set-option -g status-interval 1

# -----------------------------------------------------------------
#  vim-tmux-navigator(only snipet)
# -----------------------------------------------------------------

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l
